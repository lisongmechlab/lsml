plugins {
    id "application"
    id "java"
    id "jacoco"

    /* Will be needed for java10+
    id "org.openjfx.javafxplugin" version "0.0.9"
    */
    id "com.github.spotbugs" version "4.7.3"
    id "edu.sc.seis.launch4j" version "2.5.0"
    id "com.dorongold.task-tree" version "2.1.0"
    id "com.diffplug.spotless" version "6.10.0"
}

repositories {
    mavenCentral()
}

applicationName = 'Li Song Mechlab'
archivesBaseName = 'lsml'
version = project.getProperty('version')
mainClassName = 'org.lisoft.lsml.view_fx.LiSongMechLab'

tasks.withType(JavaCompile) {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.compilerArgs += "-Xlint:unchecked"
    options.compilerArgs += "-Xlint:deprecation"
    options.encoding = "UTF-8"
}

/* Will be needed for java 10+
javafx {
    version = "15.0.1"
    modules = [ 'javafx.controls', 'javafx.fxml' ]
}*/

/* ----------------------------------------------------------------------------
 * Dependencies
 * --------------------------------------------------------------------------*/
dependencies {
    implementation "com.thoughtworks.xstream:xstream:1.4.18",
            "net.java.dev.jna:jna:5.10.0",
            "com.google.dagger:dagger:2.21"

    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs.toolVersion.get()}"

    annotationProcessor "com.google.dagger:dagger-compiler:2.21"

    testImplementation "junit:junit:4.12+",
            "org.mockito:mockito-core:2.23.4",
            "pl.pragmatists:JUnitParams:1.1.1"
}

spotbugs {
    reportsDir = file("$buildDir/spotbugs")
    excludeFilter = file("$rootProject.projectDir/findbugsExclude.xml")
    onlyAnalyze = ['org.lisoft.lsml.*']
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore', '*.fxml'
        ratchetFrom 'origin/develop'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        googleJavaFormat('1.7')
        ratchetFrom 'origin/develop'
        licenseHeaderFile 'license_header'
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

test {
    jacoco {
        excludes = ['**/view_fx/**',
                    '**/database/gamedata/**',
                    '**/database/gamedata/MwoDataReader**',
                    '**/view_headless/**']
    }
}

check.dependsOn jacocoTestReport

/* ----------------------------------------------------------------------------
 * Release Management
 * --------------------------------------------------------------------------*/
launch4j {
    jreMinVersion = "1.8.0_301"
    mainClassName = mainClassName
    dontWrapJar = true
    headerType = "gui"
    outputDir = "../installer/"
    icon = '../installer/icon.ico'
    manifest = '../installer/lsml.manifest'
}

task wixCandle64(type: Exec) {
    workingDir 'installer'
    executable 'candle'
    args '-dg_64bit="yes"', '-dg_version=' + version, '"*.wxs"'
    dependsOn = ["createExe"]
}

task wixLight64(type: Exec) {
    workingDir 'installer'
    executable 'light'
    args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-' + version + '_64bit.msi'
    dependsOn = ["wixCandle64"]
}

task wixCandle32(type: Exec) {
    workingDir 'installer'
    executable 'candle'
    args '-dg_64bit="no"', '-dg_version=' + version, '"*.wxs"'
    dependsOn = ["createExe"]
}

task wixLight32(type: Exec) {
    workingDir 'installer'
    executable 'light'
    args '-ext', 'WixUIExtension', '"*.wixobj"', '-out', 'LSML_Setup-' + version + '_32bit.msi'
    dependsOn = ["wixCandle32"]
}

compileJava.mustRunAfter clean

task release {
    dependsOn = ["clean", "check", "wixLight64", "wixLight32"]
}

jar {
    archiveFileName = "lsml.jar"
    destinationDirectory = file('installer/')

    // Always make fat jar
    from {
        // TODO if we ever convert LSML to modular.
        // https://stackoverflow.com/questions/53902118/signing-java-11-jar-with-jarsigner-duplicate-entry-module-info-class
        exclude '**/module-info.class'
        // Not great, but easiset fix for our fat jars right now...
        exclude '**/LICENSE'

        configurations.runtimeClasspath.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    // Change the version string in the database to match the released version
    eachFile { copyDetails ->
        if (copyDetails.path == 'database.xml') {
            filter { line ->
                line.replace('(develop)', archiveVersion.get())
            }
        }
    }

    manifest {
        attributes('Main-Class': mainClassName,
                'Implementation-Title': 'Li Song Mechlab',
                'Implementation-Version': archiveVersion)
    }
}
