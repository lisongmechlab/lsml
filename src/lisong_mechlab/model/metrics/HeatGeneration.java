/*
 * @formatter:off
 * Li Song Mechlab - A 'mech building tool for PGI's MechWarrior: Online.
 * Copyright (C) 2013  Li Song
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */  
//@formatter:on
package lisong_mechlab.model.metrics;

import lisong_mechlab.model.chassi.HeatModifier;
import lisong_mechlab.model.item.Engine;
import lisong_mechlab.model.item.Item;
import lisong_mechlab.model.item.Weapon;
import lisong_mechlab.model.loadout.LoadoutBase;
import lisong_mechlab.model.loadout.LoadoutStandard;

/**
 * This {@link Metric} calculates the asymptotic heat generation per second for a {@link LoadoutStandard}.
 * <p>
 * It accounts for the heat generated by the engine at 100% throttle but not for jump jets.
 * 
 * @author Li Song
 */
public class HeatGeneration implements Metric{
   private final LoadoutBase<?> loadout;

   public HeatGeneration(final LoadoutBase<?> aLoadout){
      loadout = aLoadout;
   }

   @Override
   public double calculate(){
      double heat = 0;
      for(Item item : loadout.getAllItems()){
         if( item instanceof Weapon ){
            heat += ((Weapon)item).getStat("h/s", loadout.getEfficiencies(), loadout.getWeaponModifiers());
         }
         else if( item instanceof Engine ){
            heat += ((Engine)item).getHeat(loadout.getWeaponModifiers());
         }
      }
      
      double extra = 0;
      for(HeatModifier heatModifier : loadout.getHeatModifiers()){
         // XXX: No modifiers of this kind have been seen in the game yet so we do not know if this is correct.
         extra += heatModifier.extraHeatGeneration(heat);
      }
      
      return heat+extra;
   }
}
